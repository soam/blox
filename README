A small framework for helping you make DSLs in Ruby.

Ruby's syntax, dynamic nature and use of blocks makes it easy to
create domain specific languages.  Blox makes this even simpler by
making it very easy to create ASTs from code using your domain
specific language.

You define one class for each of the "commands" in your language.

Blox generates a function for each of these classes and injects
these functions into a module, which can then be included into any
class that wants to use your DSL.  If you override nothing, then all
these functions do is build up an AST whose nodes are instances of
your command classes.

You create a class for each command by extending Blox::Command or
Blox::BlockCommand, depending on whether you want the block passed
to the command to be executed automatically.  Look inside
Blox::Command and Blox::BlockCommand; you probably want to override
execute, execute_before_block, execute_after_block, etc.

Put all your command classes in some module, and call create_language
with this module as an argument.  A function is generated for every
class in that module.

Look in the samples for examples -- see the ast/ demo for a trivial
example, and the webservice/ demo for a slightly less trivial one.
